---
title: dplyr -- 2实战
date: '2018-01-03'
categories:
  - r
  - dplyr
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(message=FALSE, warning=FALSE,eval = F)
```

把前两天的两篇文章合并，解决方法：名字还是不能太长，在content目录下新建test目录，把它放在content目录下的test目录，不放在post目录，我的test目录只有两篇文章

### 1.1、选择行`filter()`

安装`nycflights13`包，该软件包中的飞机航班数据将用于本文中`dplyr`包各个函数的演示

```{r message=FALSE, warning=FALSE, eval = TRUE}
library(dplyr)
library(nycflights13)
```

函数`tibble::as_tibble()`将过长过大的数据集转换为显示更友好的`tbl_df` 类型:

```{r, eval = TRUE}
flights <- tibble::as_tibble(flights)
head(flights) #有336,776 x 19
filter(flights,origin == "JFK",month == 6L) #－ 获取六月份所有从”JFK”机场起飞的航班
slice(flights,1:2) #选取前面的1:2行
sample_n(flights, 4, replace = TRUE)# 随机选取4条数据记录。
flights %>% top_n(4,dep_time)
```

### 1.2、选择列 `select()`

若要对选择的列进行处理用mutate函数，这里只能对列名进行处理.

```{r, eval = TRUE}
ans <- flights %>% select(dep_time,arr_time)
head(ans)

ans <- flights %>% select(day:arr_delay)
head(ans)
```


```{r, eval = TRUE}
#选择整数列,若要对选择的列进行处理用mutate函数，这里只能对列名进行处理，比如
ans <- flights %>% head() %>% select(where(is.integer))
ans
```


```{r, eval = TRUE}
#选择是字符串的列
ans <- flights %>% head() %>% select(where(function(x)is.character(x) ))
ans


```

选择数值列并且以某个字符开始的列

```{r, eval = TRUE}
select(iris,where(is.numeric)) %>% select(starts_with("s")) %>% head()
```

选择非数值列
```{r, eval = TRUE,warning=FALSE}
# 选择非数值列
library(purrr)
iris %>% select(!where( is.numeric )) %>% head()
iris %>% select(where(is.factor)) %>% head()

```

行同时选择——子集

```{r, eval = TRUE}
filter(flights,origin == "JFK",month == 6L) %>%select(day:arr_delay)
```

### 1.3、排序`arrange()`
```{r, eval = TRUE}
ans <- arrange(flights,origin,desc(dest))  #对列名加 desc() 进行倒序: 与基本函数order()类似
head(ans)
```

### 1.4、添加新变量`mutate`


```{r, eval = TRUE}
# 添加新变量(可以多列) 
flights %>% mutate(yanwu=arr_delay + dep_delay) %>% head()

flights %>% transmute(yanwu=arr_delay + dep_delay) %>% head()


```

有多少航班完全没有延误


```{r, eval = TRUE}
#有多少航班完全没有延误
flights %>% mutate(yanwu=arr_delay + dep_delay) %>% filter(yanwu<0) %>% head()


# 可以在同一语句中对刚新增加的列进行操作:
transmute(flights, 
       gain = arr_delay + dep_delay, 
       gain_per_hour = gain / (arr_time / 60))
```

### 1.5 汇总(行): `summarise()`

对数据框调用其它函数进行汇总操作, 返回一维的结果:先用一个简单的数据集iris


```{r, eval = TRUE}
iris %>% group_by(Species) %>% summarise(m = mean(Sepal.Length,na.rm = T))
iris %>% group_by(Species) %>% summarise(across(where(is.numeric),list(mean=mean)))
iris %>% group_by(Species) %>% summarise(across(starts_with("Sepal"), list(min = min,max = max)))
```

```{r,eval = TRUE}
iris %>% group_by(k = round(Sepal.Width,0) ) %>% 
  summarise(f_count=n()) %>% arrange(desc(f_count)) 
#上述等价 
iris %>% group_by(k = round(Sepal.Width,0)) %>% tally(sort=TRUE)


#tally可以一步完成上述工作，group_by()以后第一次使用tally进行n()操作,再一次就是sum(n) sort=TRUE对结果排序,当等于TRUE是降序
#再次使用tally()就是sum()
iris %>% group_by(k = round(Sepal.Width,0)) %>% tally(sort=TRUE)%>%tally()

```

### 1.6、分组动作

以上5个函数已经很方便了, 但是当它们跟分组操作这个概念结合起来时, 那才叫真正的强大! 当对数据集通过 `group_by() `添加了分组信息后,`filter()`,`select（）`,`mutate()`, `arrange()` 和 `summarise()` 函数会自动对这些 tbl 类数据执行分组操作 (R语言泛型函数的优势).

例如: 对飞机航班数据按飞机编号 (tailnum) 进行分组, 计算该飞机航班的次数 (count = n()), 平均飞行距离 (dist = mean(distance, na.rm = TRUE)) 和 延时 (delay = mean(arr_delay, na.rm = TRUE))

```{r,eval = TRUE}
ans=flights %>%
		group_by(tailnum) %>%
			summarise(count=n(),
			          dist=mean(distance,na.rm = T),
			          delay=mean(arr_delay,na.rm = T))

ans %>% head()

ans = ans %>% filter(count>20 & dist<2000 & delay >0 )
#用 ggplot2 包作个图观察一下, 发现飞机延时不延时跟飞行距离没太大相关性:
library(ggplot2)
ggplot(ans, aes(dist, delay)) + geom_point(aes(size = count), alpha = 1/2) + geom_smooth(method = 'gam',formula = y ~ s(x, bs = "cs")) + scale_size_area()

```


```{r}
sessionInfo()
```



```{r setup, include=FALSE}
knitr::opts_chunk$set(message=FALSE, warning=FALSE)
```
记录是一行,字段是一列


## 1、转换与合并

left_join(a, b, by = "x1")：	向数据集a中加入匹配的数据集b记录（行）。 

right_join(a, b, by = "x1")：	向数据集b中加入匹配的数据集a记录。

inner_join(a, b, by = "x1")：	合并数据。仅保留匹配的记录。

full_join(a, b, by = "x1")：		合并数据。保留所有记录，所有行。没有的用NA填充

```{r message=FALSE, warning=FALSE}
library(dplyr)
a=data.frame(x1=c("A","B","C"),x2=c(1:3))
b=data.frame(x1=c("A","B","D"),x3=c("T","F","T"))
print(a)

print(b)
```

```{r message=FALSE, warning=FALSE}
left_join(a, b, by = "x1")#	向数据集a中加入匹配的数据集b记录。
right_join(a, b, by = "x1")#	向数据集b中加入匹配的数据集a记录。
inner_join(a, b, by = "x1")#	合并数据。仅保留匹配的记录。
full_join(a, b, by = "x1")# 合并数据。保留所有记录，所有行，没有的用NA填充
```


## 2、筛选与合并

semi_join(a, b, by = "x1")： 	数据集a中能与数据集b匹配的记录。

anti_join(a, b, by = "x1")：	数据集a中与数据集b不匹配的记录

## 3、集合操作

intersect(x, y)：	均出现在数据集x和y中的记录。xy交集

union(x, y)：	出现在数据集x或y中的记录。 xy并集

setdiff(x, y)：	仅出现在数据集x而不在y中的记录。x与y的差集


bind_rows(x, y)：	把数据集y作为新的⾏行添加到x中。

bind_cols(x, y)：	把数据集y作为新的列添加到x中。

  + 注意：数据按所在位置匹配。
  + 和rbind（） 与cbind（）不一样的是，rbind（）/cbind（）对数据合并有严格的要求
  
```{r message=FALSE, warning=FALSE}
x=data.frame(A=c("a","b","c"),B=c("t","u","v"),C=c(1:3))
y=data.frame(A=c("a","b","d"),B=c("t","u","v"),D=c(2:4))
print(x)

print(y)
```

```{r message=FALSE, warning=FALSE}
bind_rows(x, y) #行合并，列全部显示，没有的用NA填充 ，选择.id="name"参数，多增加一列，列名name
bind_rows(x, y, .id="name")# 为了区别数据是分别来自于两个其他数据库，可以用id进行区别

bind_cols(x, y) #列合并，

```


## 4、数据排序
```
arrange(.data, ..., .by_group = FALSE) :根据变量进行排序
  + 默认升序，在变量前面添加desc()则变为降序
  + .by_group = FALSE 默认忽视对组的升序排序,设置为TRUE则把组进行升序排序以后再按比变量进行排序
```

```{r}
arrange(mtcars, cyl, desc(disp))  #根据变量进行排序

by_cyl <- mtcars %>% group_by(cyl)

by_cyl %>% arrange(desc(wt), .by_group = TRUE) #默认忽视对组的升序排序,设置为TRUE则把组进行升序排序以后再按比变量进行排序
```

## 5、 运行环境



```{r}
sessionInfo()
```




