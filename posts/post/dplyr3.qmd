---
title: dplyr -- 3合并数据
date: '2018-01-04'
categories:
  - r
  - dplyr
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(message=FALSE, warning=FALSE)
```
记录是一行,字段是一列


## 1、转换与合并

left_join(a, b, by = "x1")：	向数据集a中加入匹配的数据集b记录（行）。 

right_join(a, b, by = "x1")：	向数据集b中加入匹配的数据集a记录。

inner_join(a, b, by = "x1")：	合并数据。仅保留匹配的记录。

full_join(a, b, by = "x1")：		合并数据。保留所有记录，所有行。没有的用NA填充

```{r message=FALSE, warning=FALSE}
library(dplyr)
a=data.frame(x1=c("A","B","C"),x2=c(1:3))
b=data.frame(x1=c("A","B","D"),x3=c("T","F","T"))
print(a)

print(b)
```

```{r message=FALSE, warning=FALSE}
left_join(a, b, by = "x1")#	向数据集a中加入匹配的数据集b记录。
right_join(a, b, by = "x1")#	向数据集b中加入匹配的数据集a记录。
inner_join(a, b, by = "x1")#	合并数据。仅保留匹配的记录。
full_join(a, b, by = "x1")# 合并数据。保留所有记录，所有行，没有的用NA填充
```


## 2、筛选与合并

semi_join(a, b, by = "x1")： 	数据集a中能与数据集b匹配的记录。

anti_join(a, b, by = "x1")：	数据集a中与数据集b不匹配的记录

## 3、集合操作

intersect(x, y)：	均出现在数据集x和y中的记录。xy交集

union(x, y)：	出现在数据集x或y中的记录。 xy并集

setdiff(x, y)：	仅出现在数据集x而不在y中的记录。x与y的差集


bind_rows(x, y)：	把数据集y作为新的⾏行添加到x中。

bind_cols(x, y)：	把数据集y作为新的列添加到x中。

  + 注意：数据按所在位置匹配。
  + 和rbind（） 与cbind（）不一样的是，rbind（）/cbind（）对数据合并有严格的要求
  
```{r message=FALSE, warning=FALSE}
x=data.frame(A=c("a","b","c"),B=c("t","u","v"),C=c(1:3))
y=data.frame(A=c("a","b","d"),B=c("t","u","v"),D=c(2:4))
print(x)

print(y)
```

```{r message=FALSE, warning=FALSE}
bind_rows(x, y) #行合并，列全部显示，没有的用NA填充 ，选择.id="name"参数，多增加一列，列名name
bind_rows(x, y, .id="name")# 为了区别数据是分别来自于两个其他数据库，可以用id进行区别

bind_cols(x, y) #列合并，

```


## 4、数据排序
```
arrange(.data, ..., .by_group = FALSE) :根据变量进行排序
  + 默认升序，在变量前面添加desc()则变为降序
  + .by_group = FALSE 默认忽视对组的升序排序,设置为TRUE则把组进行升序排序以后再按比变量进行排序
```

```{r}
arrange(mtcars, cyl, desc(disp))  #根据变量进行排序

by_cyl <- mtcars %>% group_by(cyl)

by_cyl %>% arrange(desc(wt), .by_group = TRUE) #默认忽视对组的升序排序,设置为TRUE则把组进行升序排序以后再按比变量进行排序
```

## 5、 运行环境



```{r}
sessionInfo()
```




