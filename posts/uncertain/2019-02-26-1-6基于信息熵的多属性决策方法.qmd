---
title: 1.6 基于信息熵的多属性决策方法
date: '2019-02-26'
categories: uncertain
---



```{r setup, include=FALSE}
knitr::opts_chunk$set(message = F,warning = F,comment = "#>",collapse = TRUE)
```

## 徐泽水《不确定多属性决策方法与应用》26页

```{r}
##  1.6 基于信息熵的多属性决策方法---徐泽水《不确定多属性决策方法与应用》26页 --1.62 实例分析

library(data.table)
library(dplyr)
A = c(2,1.5,2,5.5,5,9,
      2.5,2.7,1.8,6.5,3,5,
      1.8,2,2.1,4.5,7,7,
      2.2,1.8,2,5,5,5)
A= matrix(A,nrow = 4,ncol = 6,byrow = T) %>% data.table()
A # 原始决策矩阵
```

```{r}
#######################################################
##### 第一步把原始决策矩阵A 利用适当的方法进行规范化为R，R为归一化后的矩阵
##########################################################
### norm_matrix()函数，根据书中收益型属性（按公式1.2）与成本型属性(按公式1.4)分别进行归一化
# 参数A表示决策矩阵,shouyi参数代表收益型属性，输入收益型属性在决策矩阵中第几列，若有多列，用数值型向量即可，
# chengben参数代表成本型属性，与收益型属性类型。
# 该参数可任选其一输入，也可同时指定。
norm_matrix = function(A,shouyi=NULL,chengben=NULL){
  if(is.matrix(A))A = data.table(A)
  stopifnot(!is.null(shouyi) | !is.null(chengben))
  m = ncol(A)
  if(is.null(chengben)) chengben =setdiff(1:m,shouyi) 
  if(is.null(shouyi)) shouyi = setdiff(1:m,chengben)
  stopifnot(length(intersect(shouyi,chengben))==0,setequal(union(shouyi,chengben),1:m))
  #对决策矩阵进行重命名
  names(A)=paste0('V',1:m)
  shouyi = paste0("V",shouyi)
  chengben = paste0("V",chengben)
  R = A
  R[,':='(c(shouyi),lapply(.SD, function(x)x/max(x))),.SDcols =shouyi] # 收益型属性归一化 （书中1.2式）
  R[,':='(c(chengben),lapply(.SD,function(x)min(x)/x)),.SDcol = chengben]# 成本型属性归一化 （书中1.3式）
  R = as.data.frame(R)
  return(R)
}

R = norm_matrix(A,chengben = 4)
round(R,3)
```

```{r}
#########################################################
##### 第二步 计算矩阵R，得到列归一化矩阵R'
#################################################
R_t = sapply(R, function(x)x/sum(x))
round(R_t,3)
#########################################################
##### 第三步 根据R_t计算属性u_j的信息熵
#################################################
entropy = function(R_t){
  if(!is.data.frame(R_t)) R_t = as.data.frame(R_t)
  n = nrow(R_t)
  E = sapply(R_t, function(x) (-1/log(n)) * sum( ifelse(x == 0 , 0 , x*log(x) ) ) )
  return(E)
}
E = entropy(R_t)
E
#########################################################
##### 第四步 根据信息熵计算权重向量
#################################################
w = (1-E)/sum(1-E)
round(w,3)
#########################################################
##### 第五步 根据权重向量按照1.12式计算每一个方案的综合属性值Z
#################################################
z = t(as.matrix(R) %*% as.matrix(w,ncol=1)) %>% as.data.frame() # 计算综合属性值
round(z,4)
#########################################################
##### 第六步 根据综合属性值Z对方案进行排序
#################################################
#rank(z) #输出排序
sort(rank(z),decreasing = T)
```

