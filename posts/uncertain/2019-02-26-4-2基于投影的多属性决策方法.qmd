---
title: 4.2基于投影的多属性决策方法(含4.3区间归一化)
date: '2019-02-26'
categories: uncertain
---



```{r setup, include=FALSE}
knitr::opts_chunk$set(message = F,warning = F,comment = "#>",collapse = TRUE)
```

#徐泽水《不确定多属性决策方法与应用》112页
##  第四章--属性权重为实数且属性值为区间数的多属性决策方法及应用
### 4.2 基于投影的多属性决策方法
```{r}
#####  第四章--属性权重为实数且属性值为区间数的多属性决策方法及应用
## 4.2 基于投影的多属性决策方法---徐泽水《不确定多属性决策方法与应用》112页 
## 4.2.2 实例分析

#####  第一步： 求出规范化矩阵
A = c(58.9,59,200,250,1.9,2.1,0.990,0.991,0.907,0.909,
      58.5,58.7,340,350,3.4,3.5,0.990,0.992,0.910,0.912,
      58.0,58.5,290,310,2.0,2.2,0.992,0.993,0.914,0.917) 
A = matrix(A,nrow = 3,byrow = T) # A为决策矩阵
A # 矩阵A的奇数列代表属性的下界 ，偶数列代表属性的上界


norm_matrix = function(A, shouyi = NULL, chengben = NULL) {
  m = ncol(A)/2
  n = nrow(A)
  #chengben = c(1,2,4,5);shouyi = NULL
  stopifnot( ncol(A)%%2 == 0 ) #检验输入的决策矩阵的列数是否为偶数
  stopifnot(!is.null(shouyi) | !is.null(chengben))
  if (is.null(chengben)) chengben = setdiff(1:m, shouyi)
  if (is.null(shouyi)) shouyi = setdiff(1:m, chengben)
  # 如果输入的shouyi与chengben向量交集不为空，且并集不是全集，则算法出错
  stopifnot(length(intersect(shouyi, chengben)) == 0, setequal(union(shouyi, chengben), 1:m))
  
  R = matrix(0, nrow = nrow(A),ncol = ncol(A))
  for(i in 1:n){
    for(j in 1:ncol(A) ){
      k = (j+1) %/% 2
      if( k %in% shouyi){
        if( (j%%2) == 0 ){# 第j列为收益类型 且为偶数
          R[i,j] = A[i,j] / sqrt(sum(A[,j-1]^2))
        }else{
          R[i,j] = A[i,j] / sqrt(sum(A[,j+1]^2))
        }
      }
      if(k %in% chengben){
        if( (j%%2) == 0 ){
          R[i,j] = (1/A[i,j-1]) / sqrt(sum((1/A[,j])^2))
        }else{
          R[i,j] = (1/A[i,j+1]) / sqrt(sum((1/A[,j])^2))
        }
      }
    }
  }

  return(R)
}
library(dplyr)
R = norm_matrix(A,chengben = c(1,3))
R
R %>% round(.,4)

w = c(0.2189,0.2182,0.1725,0.2143,0.1761)
Y = t(apply(R, 1 , function(x){x* rep(w,each = 2)})) %>% round(.,4)
Y

position_y = apply(Y, 2, function(x)max(x))
position_y
apply(Y, 1,function(x)sum(x*position_y))/sqrt(sum(position_y^2))


```


### 4.3 区间归一化
 ** 注：书中的归一化有问题 **
 
```{r}
rm(list = ls() )
#####  第一步： 求出规范化矩阵
A = c(1.5,1.9,9,9.5,8,9,10,12,12,13,8,9,2,3,1.2,1.3,
      2.7,3.1,5,6,9,9.5,4,5,4,5,7,8,9,10,1.1,1.2,
      1.8,2,8.5,9.1,7,8,8,9,9,10,8.5,9,5,6,1,1.3,
      2.5,2.8,5,6,9,10,6,7,6,8,7,7.5,8,9,0.8,0.9,
      2,2.5,4,5,8,9,5,6,5,7,8,9,5,6,0.6,0.7) 
A = matrix(A,nrow = 5,byrow = T) # A为决策矩阵
A # 矩阵A的奇数列代表属性的下界 ，偶数列代表属性的上界

norm_matrix = function(A, shouyi = NULL, chengben = NULL) {
  m = ncol(A)/2
  n = nrow(A)
  #chengben = c(1,2,4,5);shouyi = NULL
  stopifnot( ncol(A)%%2 == 0 ) #检验输入的决策矩阵的列数是否为偶数
  stopifnot(!is.null(shouyi) | !is.null(chengben))
  if (is.null(chengben)) chengben = setdiff(1:m, shouyi)
  if (is.null(shouyi)) shouyi = setdiff(1:m, chengben)
  # 如果输入的shouyi与chengben向量交集不为空，且并集不是全集，则算法出错
  stopifnot(length(intersect(shouyi, chengben)) == 0, setequal(union(shouyi, chengben), 1:m))
  
  R = matrix(0, nrow = nrow(A),ncol = ncol(A))
  for(i in 1:n){
    for(j in 1:ncol(A) ){
      k = (j+1) %/% 2
      if( k %in% shouyi){
        if( (j%%2) == 0 ){# 第j列为收益类型 且为偶数
          R[i,j] = A[i,j] / sqrt(sum(A[,j-1]^2))
        }else{
          R[i,j] = A[i,j] / sqrt(sum(A[,j+1]^2))
        }
      }
      if(k %in% chengben){
        if( (j%%2) == 0 ){
          R[i,j] = (1/A[i,j-1]) / sqrt(sum((1/A[,j])^2))
        }else{
          R[i,j] = (1/A[i,j+1]) / sqrt(sum((1/A[,j])^2))
        }
      }
    }
  }

  return(R)
}

R = norm_matrix(A,chengben = c(1,2,4,5)) %>% round(.,2)
R 
R %>% round(.,2)


w = c(0.1,0.12,0.15,0.13,0.17,0.11,0.12,0.1)
Y = t(apply(R, 1 , function(x){x* rep(w,each = 2)})) %>% round(.,3)
Y

norm_matrix(A,shouyi = c(3,6,7,8)) %>% round(.,2)
```



