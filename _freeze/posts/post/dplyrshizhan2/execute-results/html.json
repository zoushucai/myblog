{
  "hash": "22fe228694ae4771b12cf3c7d5426f48",
  "result": {
    "markdown": "---\ntitle: dplyr -- 2实战\ndate: '2018-01-03'\ncategories:\n  - r\n  - dplyr\n---\n\n\n\n\n把前两天的两篇文章合并，解决方法：名字还是不能太长，在content目录下新建test目录，把它放在content目录下的test目录，不放在post目录，我的test目录只有两篇文章\n\n### 1.1、选择行`filter()`\n\n安装`nycflights13`包，该软件包中的飞机航班数据将用于本文中`dplyr`包各个函数的演示\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(nycflights13)\n```\n:::\n\n\n函数`tibble::as_tibble()`将过长过大的数据集转换为显示更友好的`tbl_df` 类型:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights <- tibble::as_tibble(flights)\nhead(flights) #有336,776 x 19\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     1     1      517         515       2     830     819      11 UA     \n2  2013     1     1      533         529       4     850     830      20 UA     \n3  2013     1     1      542         540       2     923     850      33 AA     \n4  2013     1     1      544         545      -1    1004    1022     -18 B6     \n5  2013     1     1      554         600      -6     812     837     -25 DL     \n6  2013     1     1      554         558      -4     740     728      12 UA     \n# … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n\n```{.r .cell-code}\nfilter(flights,origin == \"JFK\",month == 6L) #－ 获取六月份所有从”JFK”机场起飞的航班\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,472 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013     6     1        2       2359       3     341     350      -9 B6     \n 2  2013     6     1      538        545      -7     925     922       3 B6     \n 3  2013     6     1      539        540      -1     832     840      -8 AA     \n 4  2013     6     1      553        600      -7     700     711     -11 EV     \n 5  2013     6     1      554        600      -6     851     908     -17 UA     \n 6  2013     6     1      557        600      -3     934     942      -8 B6     \n 7  2013     6     1      559        600      -1     856     930     -34 UA     \n 8  2013     6     1      606        610      -4     847     906     -19 B6     \n 9  2013     6     1      609        615      -6     759     808      -9 US     \n10  2013     6     1      615        610       5     837     847     -10 B6     \n# … with 9,462 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n\n```{.r .cell-code}\nslice(flights,1:2) #选取前面的1:2行\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 19\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     1     1      517         515       2     830     819      11 UA     \n2  2013     1     1      533         529       4     850     830      20 UA     \n# … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n\n```{.r .cell-code}\nsample_n(flights, 4, replace = TRUE)# 随机选取4条数据记录。\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 19\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     7    11     1703        1700       3    1940    2018     -38 DL     \n2  2013    10     1      822         829      -7    1007    1027     -20 DL     \n3  2013     5     5     1932        1930       2    2209    2237     -28 UA     \n4  2013     7    18     1836        1820      16    2145    2141       4 DL     \n# … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n\n```{.r .cell-code}\nflights %>% top_n(4,dep_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 29 × 19\n    year month   day dep_time sched_de…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n   <int> <int> <int>    <int>      <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n 1  2013    10    30     2400       2359       1     327     337     -10 B6     \n 2  2013    11    27     2400       2359       1     515     445      30 B6     \n 3  2013    12     5     2400       2359       1     427     440     -13 B6     \n 4  2013    12     9     2400       2359       1     432     440      -8 B6     \n 5  2013    12     9     2400       2250      70      59    2356      63 B6     \n 6  2013    12    13     2400       2359       1     432     440      -8 B6     \n 7  2013    12    19     2400       2359       1     434     440      -6 B6     \n 8  2013    12    29     2400       1700     420     302    2025     397 AA     \n 9  2013     2     7     2400       2359       1     432     436      -4 B6     \n10  2013     2     7     2400       2359       1     443     444      -1 B6     \n# … with 19 more rows, 9 more variables: flight <int>, tailnum <chr>,\n#   origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>,\n#   minute <dbl>, time_hour <dttm>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n### 1.2、选择列 `select()`\n\n若要对选择的列进行处理用mutate函数，这里只能对列名进行处理.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nans <- flights %>% select(dep_time,arr_time)\nhead(ans)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  dep_time arr_time\n     <int>    <int>\n1      517      830\n2      533      850\n3      542      923\n4      544     1004\n5      554      812\n6      554      740\n```\n:::\n\n```{.r .cell-code}\nans <- flights %>% select(day:arr_delay)\nhead(ans)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n    day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay\n  <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl>\n1     1      517            515         2      830            819        11\n2     1      533            529         4      850            830        20\n3     1      542            540         2      923            850        33\n4     1      544            545        -1     1004           1022       -18\n5     1      554            600        -6      812            837       -25\n6     1      554            558        -4      740            728        12\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#选择整数列,若要对选择的列进行处理用mutate函数，这里只能对列名进行处理，比如\nans <- flights %>% head() %>% select(where(is.integer))\nans\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 8\n   year month   day dep_time sched_dep_time arr_time sched_arr_time flight\n  <int> <int> <int>    <int>          <int>    <int>          <int>  <int>\n1  2013     1     1      517            515      830            819   1545\n2  2013     1     1      533            529      850            830   1714\n3  2013     1     1      542            540      923            850   1141\n4  2013     1     1      544            545     1004           1022    725\n5  2013     1     1      554            600      812            837    461\n6  2013     1     1      554            558      740            728   1696\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#选择是字符串的列\nans <- flights %>% head() %>% select(where(function(x)is.character(x) ))\nans\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  carrier tailnum origin dest \n  <chr>   <chr>   <chr>  <chr>\n1 UA      N14228  EWR    IAH  \n2 UA      N24211  LGA    IAH  \n3 AA      N619AA  JFK    MIA  \n4 B6      N804JB  JFK    BQN  \n5 DL      N668DN  LGA    ATL  \n6 UA      N39463  EWR    ORD  \n```\n:::\n:::\n\n\n选择数值列并且以某个字符开始的列\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(iris,where(is.numeric)) %>% select(starts_with(\"s\")) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Sepal.Length Sepal.Width\n1          5.1         3.5\n2          4.9         3.0\n3          4.7         3.2\n4          4.6         3.1\n5          5.0         3.6\n6          5.4         3.9\n```\n:::\n:::\n\n\n选择非数值列\n\n::: {.cell}\n\n```{.r .cell-code}\n# 选择非数值列\nlibrary(purrr)\niris %>% select(!where( is.numeric )) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Species\n1  setosa\n2  setosa\n3  setosa\n4  setosa\n5  setosa\n6  setosa\n```\n:::\n\n```{.r .cell-code}\niris %>% select(where(is.factor)) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Species\n1  setosa\n2  setosa\n3  setosa\n4  setosa\n5  setosa\n6  setosa\n```\n:::\n:::\n\n\n行同时选择——子集\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(flights,origin == \"JFK\",month == 6L) %>%select(day:arr_delay)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 9,472 × 7\n     day dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay\n   <int>    <int>          <int>     <dbl>    <int>          <int>     <dbl>\n 1     1        2           2359         3      341            350        -9\n 2     1      538            545        -7      925            922         3\n 3     1      539            540        -1      832            840        -8\n 4     1      553            600        -7      700            711       -11\n 5     1      554            600        -6      851            908       -17\n 6     1      557            600        -3      934            942        -8\n 7     1      559            600        -1      856            930       -34\n 8     1      606            610        -4      847            906       -19\n 9     1      609            615        -6      759            808        -9\n10     1      615            610         5      837            847       -10\n# … with 9,462 more rows\n```\n:::\n:::\n\n\n### 1.3、排序`arrange()`\n\n::: {.cell}\n\n```{.r .cell-code}\nans <- arrange(flights,origin,desc(dest))  #对列名加 desc() 进行倒序: 与基本函数order()类似\nhead(ans)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     1     2      905         822      43    1313    1045      NA EV     \n2  2013     1     3      848         850      -2    1149    1113      36 EV     \n3  2013     1     4      901         850      11    1120    1113       7 EV     \n4  2013     1     6      843         848      -5    1053    1111     -18 EV     \n5  2013     1     7      858         850       8    1105    1113      -8 EV     \n6  2013     1     8      847         850      -3    1116    1113       3 EV     \n# … with 9 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, and abbreviated variable names ¹​sched_dep_time,\n#   ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n:::\n\n\n### 1.4、添加新变量`mutate`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 添加新变量(可以多列) \nflights %>% mutate(yanwu=arr_delay + dep_delay) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 20\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     1     1      517         515       2     830     819      11 UA     \n2  2013     1     1      533         529       4     850     830      20 UA     \n3  2013     1     1      542         540       2     923     850      33 AA     \n4  2013     1     1      544         545      -1    1004    1022     -18 B6     \n5  2013     1     1      554         600      -6     812     837     -25 DL     \n6  2013     1     1      554         558      -4     740     728      12 UA     \n# … with 10 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, yanwu <dbl>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n\n```{.r .cell-code}\nflights %>% transmute(yanwu=arr_delay + dep_delay) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 1\n  yanwu\n  <dbl>\n1    13\n2    24\n3    35\n4   -19\n5   -31\n6     8\n```\n:::\n:::\n\n\n有多少航班完全没有延误\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#有多少航班完全没有延误\nflights %>% mutate(yanwu=arr_delay + dep_delay) %>% filter(yanwu<0) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 20\n   year month   day dep_time sched_dep…¹ dep_d…² arr_t…³ sched…⁴ arr_d…⁵ carrier\n  <int> <int> <int>    <int>       <int>   <dbl>   <int>   <int>   <dbl> <chr>  \n1  2013     1     1      544         545      -1    1004    1022     -18 B6     \n2  2013     1     1      554         600      -6     812     837     -25 DL     \n3  2013     1     1      557         600      -3     709     723     -14 EV     \n4  2013     1     1      557         600      -3     838     846      -8 B6     \n5  2013     1     1      558         600      -2     849     851      -2 B6     \n6  2013     1     1      558         600      -2     853     856      -3 B6     \n# … with 10 more variables: flight <int>, tailnum <chr>, origin <chr>,\n#   dest <chr>, air_time <dbl>, distance <dbl>, hour <dbl>, minute <dbl>,\n#   time_hour <dttm>, yanwu <dbl>, and abbreviated variable names\n#   ¹​sched_dep_time, ²​dep_delay, ³​arr_time, ⁴​sched_arr_time, ⁵​arr_delay\n```\n:::\n\n```{.r .cell-code}\n# 可以在同一语句中对刚新增加的列进行操作:\ntransmute(flights, \n       gain = arr_delay + dep_delay, \n       gain_per_hour = gain / (arr_time / 60))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 2\n    gain gain_per_hour\n   <dbl>         <dbl>\n 1    13         0.940\n 2    24         1.69 \n 3    35         2.28 \n 4   -19        -1.14 \n 5   -31        -2.29 \n 6     8         0.649\n 7    14         0.920\n 8   -17        -1.44 \n 9   -11        -0.788\n10     6         0.478\n# … with 336,766 more rows\n```\n:::\n:::\n\n\n### 1.5 汇总(行): `summarise()`\n\n对数据框调用其它函数进行汇总操作, 返回一维的结果:先用一个简单的数据集iris\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>% group_by(Species) %>% summarise(m = mean(Sepal.Length,na.rm = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  Species        m\n  <fct>      <dbl>\n1 setosa      5.01\n2 versicolor  5.94\n3 virginica   6.59\n```\n:::\n\n```{.r .cell-code}\niris %>% group_by(Species) %>% summarise(across(where(is.numeric),list(mean=mean)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  Species    Sepal.Length_mean Sepal.Width_mean Petal.Length_mean Petal.Width_…¹\n  <fct>                  <dbl>            <dbl>             <dbl>          <dbl>\n1 setosa                  5.01             3.43              1.46          0.246\n2 versicolor              5.94             2.77              4.26          1.33 \n3 virginica               6.59             2.97              5.55          2.03 \n# … with abbreviated variable name ¹​Petal.Width_mean\n```\n:::\n\n```{.r .cell-code}\niris %>% group_by(Species) %>% summarise(across(starts_with(\"Sepal\"), list(min = min,max = max)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 5\n  Species    Sepal.Length_min Sepal.Length_max Sepal.Width_min Sepal.Width_max\n  <fct>                 <dbl>            <dbl>           <dbl>           <dbl>\n1 setosa                  4.3              5.8             2.3             4.4\n2 versicolor              4.9              7               2               3.4\n3 virginica               4.9              7.9             2.2             3.8\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\niris %>% group_by(k = round(Sepal.Width,0) ) %>% \n  summarise(f_count=n()) %>% arrange(desc(f_count)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n      k f_count\n  <dbl>   <int>\n1     3     106\n2     4      25\n3     2      19\n```\n:::\n\n```{.r .cell-code}\n#上述等价 \niris %>% group_by(k = round(Sepal.Width,0)) %>% tally(sort=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n      k     n\n  <dbl> <int>\n1     3   106\n2     4    25\n3     2    19\n```\n:::\n\n```{.r .cell-code}\n#tally可以一步完成上述工作，group_by()以后第一次使用tally进行n()操作,再一次就是sum(n) sort=TRUE对结果排序,当等于TRUE是降序\n#再次使用tally()就是sum()\niris %>% group_by(k = round(Sepal.Width,0)) %>% tally(sort=TRUE)%>%tally()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n      n\n  <int>\n1     3\n```\n:::\n:::\n\n\n### 1.6、分组动作\n\n以上5个函数已经很方便了, 但是当它们跟分组操作这个概念结合起来时, 那才叫真正的强大! 当对数据集通过 `group_by() `添加了分组信息后,`filter()`,`select（）`,`mutate()`, `arrange()` 和 `summarise()` 函数会自动对这些 tbl 类数据执行分组操作 (R语言泛型函数的优势).\n\n例如: 对飞机航班数据按飞机编号 (tailnum) 进行分组, 计算该飞机航班的次数 (count = n()), 平均飞行距离 (dist = mean(distance, na.rm = TRUE)) 和 延时 (delay = mean(arr_delay, na.rm = TRUE))\n\n\n::: {.cell}\n\n```{.r .cell-code}\nans=flights %>%\n\t\tgroup_by(tailnum) %>%\n\t\t\tsummarise(count=n(),\n\t\t\t          dist=mean(distance,na.rm = T),\n\t\t\t          delay=mean(arr_delay,na.rm = T))\n\nans %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n  tailnum count  dist delay\n  <chr>   <int> <dbl> <dbl>\n1 D942DN      4  854. 31.5 \n2 N0EGMQ    371  676.  9.98\n3 N10156    153  758. 12.7 \n4 N102UW     48  536.  2.94\n5 N103US     46  535. -6.93\n6 N104UW     47  535.  1.80\n```\n:::\n\n```{.r .cell-code}\nans = ans %>% filter(count>20 & dist<2000 & delay >0 )\n#用 ggplot2 包作个图观察一下, 发现飞机延时不延时跟飞行距离没太大相关性:\nlibrary(ggplot2)\nggplot(ans, aes(dist, delay)) + geom_point(aes(size = count), alpha = 1/2) + geom_smooth(method = 'gam',formula = y ~ s(x, bs = \"cs\")) + scale_size_area()\n```\n\n::: {.cell-output-display}\n![](dplyrshizhan2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n:::\n",
    "supporting": [
      "dplyrshizhan2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}