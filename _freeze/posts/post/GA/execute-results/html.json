{
  "hash": "8c4fd1d45efb9c6e18ec4b9ee1fd71e0",
  "result": {
    "markdown": "---\ntitle: GA包---遗传算法\ndate: '2015-11-09'\ncategories: r\n---\n\n\n\n\n- 2022年3月23更新\n\n- 参考: [Genetic Algorithms • GA (luca-scr.github.io)](https://luca-scr.github.io/GA/)\n\n## 1、用法：(默认求解最大值)\n\n- 注意:  **默认求解最大值**\n\n-------------------------\n\n```R\nga(type = c(\"binary\", \"real-valued\", \"permutation\"),   \n   fitness, ...,                            #  fitness:适应度函数 \n   lower, upper,                                #解得下界/解得上界(多元变量为一个向量)\n   nBits,                               #一个种群用二进制编码的长度是多少(长度越大代表精度越高,一般等于变量的个数即可)\n   population = gaControl(type)$population,     # 初始种群\n   selection = gaControl(type)$selection,       #选择\n   crossover = gaControl(type)$crossover,       #交叉\n   mutation = gaControl(type)$mutation,         #变异\n   popSize = 50,                               #种群大小\n   pcrossover = 0.8,                           #交叉概率（默认0.8）\n   pmutation = 0.1,                            #变异概率（默认0.1）\n   elitism = base::max(1, round(popSize*0.05)),   #代沟(默认情况下,前5%个体将在每个迭代中保留)\n   updatePop = FALSE,\n   postFitness = NULL,\n   maxiter = 100,                               # 最大迭代次数(默认100)\n   run = maxiter,                                #表示连续出现一定数目的目标函数值未改变,则GA终止搜索\n   maxFitness = Inf,                            # 适应度函数的上界,GA搜索后中断\n   names = NULL,                                # 表示决策变量名的向量\n   suggestions = NULL,                          # 包含某些指定的初始种群\n   optim = FALSE,                             \n   # optim默认值为FALSE，用于确定是否应使用使用通用优化算法的局部搜索。有关更多详细信息和更精细的控制，请参阅参数optimArgs。\n   # 简单理解, 即optim= T时, 表面进过一定次数的迭代后从 GA 最优解开始最为 optim函数的初始值,开始进行局部优化\n   # optimArgs 控制本地搜索算法的列表，具有以下组件：\n   optimArgs = list(method = \"L-BFGS-B\", # 可以是optim函数中的方法\n                    poptim = 0.1,# 范围[0，1]中的值，指定在每次GA迭代时执行局部搜索的概率(默认值为0.1)。\n                    pressel = 0.5,\n                    control = list(fnscale = -1, maxit = 100)),\n   keepBest = FALSE,                 #一个逻辑参数，指定每次迭代的最佳解决方案是否应该保存在一个名为 bestSol 的槽中。\n   parallel = FALSE,                 #是否采用并行运算\n   monitor = if(interactive())        #绘图用的,监控遗传算法的运行状况\n               { if(is.RStudio()) gaMonitor else gaMonitor2 } \n             else FALSE,\n   seed = NULL)         #一个整数值包含随机数发生器的状态。这个参数可以用来复制GA搜索的结果。\n```\n\n## 2、参数说明\n\n\n\n```\ntype: 解得编码类型\n    1.  binary :二进制编码\n    2.  real-valued：实数浮点编码\n    3.  permutation：问题涉及到重新排序的列表，字符串编码。可求解TSP问题\n通过gaControl设置默认的遗传算子。检索当前设置操作:\n    gaControl(“binary”)\n    gaControl(“real-valued”)\n    gaControl(“permutation”)\n```\n\n\n## 3.举例\n\n\n### 3.1. 一元函数: \n\n- 函数为:  $ |x|+cos(x) $\n\n- 该函数有最小值$ f(0)=1（−R \\leq x \\leq R)$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\nlibrary(GA)\n#>  Loading required package: foreach\n#>  Loading required package: iterators\n#>  Package 'GA' version 3.2.2\n#>  Type 'citation(\"GA\")' for citing this R package in publications.\n#>  \n#>  Attaching package: 'GA'\n#>  The following object is masked from 'package:utils':\n#>  \n#>      de\nf = function(x)  abs(x)+cos(x)\ncurve(f, -20, 20)\n```\n\n::: {.cell-output-display}\n![](GA_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfitness = function(x) -f(x)  #由于这个函数默认求解最大值，所以我们求-f(x)的最大值\nGA = ga(type = \"real-valued\", fitness = fitness, lower = -20, upper = 20,monitor=F)# monitor 禁止打印信息\n\nGA  ##返回的结果GA为S4对象，一个GA类型 调用其属性用@符号 \n#>  An object of class \"ga\"\n#>  \n#>  Call:\n#>  ga(type = \"real-valued\", fitness = fitness, lower = -20, upper = 20,     monitor = F)\n#>  \n#>  Available slots:\n#>   [1] \"call\"         \"type\"         \"lower\"        \"upper\"        \"nBits\"       \n#>   [6] \"names\"        \"popSize\"      \"iter\"         \"run\"          \"maxiter\"     \n#>  [11] \"suggestions\"  \"population\"   \"elitism\"      \"pcrossover\"   \"pmutation\"   \n#>  [16] \"optim\"        \"fitness\"      \"summary\"      \"bestSol\"      \"fitnessValue\"\n#>  [21] \"solution\"\nGA@solution # 返回最优解\n#>                  x1\n#>  [1,] -3.048778e-05\nsummary(GA)\n#>  ── Genetic Algorithm ─────────────────── \n#>  \n#>  GA settings: \n#>  Type                  =  real-valued \n#>  Population size       =  50 \n#>  Number of generations =  100 \n#>  Elitism               =  2 \n#>  Crossover probability =  0.8 \n#>  Mutation probability  =  0.1 \n#>  Search domain = \n#>         x1\n#>  lower -20\n#>  upper  20\n#>  \n#>  GA results: \n#>  Iterations             = 100 \n#>  Fitness function value = -1.00003 \n#>  Solution = \n#>                  x1\n#>  [1,] -3.048778e-05\n\n\n\n## 画图--- 展示迭代信息\nplot(GA)  #  #默认情况下，ga函数通过打印每个迭代的平均值和最佳适应度值来监视搜索,画出每代最佳的适应度函数值与每代的平均适应度函数值\n```\n\n::: {.cell-output-display}\n![](GA_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n\n\n# ####画出最优值\n# curve(f, -20, 20)  #\n# abline(v = GA@solution, lty = 3)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n### binary 测试\nGA2 = ga(type = \"binary\", fitness = fitness, nBits = 1,lower = -20, upper = 20,monitor=F)\nGA2@solution # 返回最优解\n#>       x1\n#>  [1,]  0\n```\n:::\n\n\n\n监视功能\n\n::: {.cell}\n\n```{.r .cell-code}\nxfun::pkg_load2('gifski') # 安装并加载该软件包\n\n########################\n##编写自己的跟踪功能,点代表一个解，来监视搜索\n## 定义一个新的监视器函数，然后将此函数作为可选参数传递给ga:\nmonitor = function(obj) { \n    curve(f, -10, 10, main = paste(\"iteration =\", obj@iter))\n    points(obj@population, obj@fitness, pch = 20, col = 2)\n    rug(obj@population, col = 2)\n    Sys.sleep(0.2)}\n## 监视函数--  运行了会输出很多静态图\n# GA = ga(type = \"real-valued\", fitness = f, lower = -10, upper = 10, monitor = monitor)\n```\n:::\n\n\n![](https://cdn.jsdelivr.net/gh/zscmmm/imgs2208save@master/img/2020091421unnamed-chunk-9-.gif)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n##############\n## 也可以储存为视频，观看，利用动画的函数做出视频  \n# library(animation)    \n# oopts = ani.options(ffmpeg = \"F:/ffmpeg/bin/ffmpeg.exe\")#在winds中设置ffmpeg    \n# saveVideo({    \n#   #打印图片    \n#   GA = ga(type = \"real-valued\", fitness = f, lower = -10, upper = 10, monitor = monitor)    \n#   ani.options(interval = 0.1, nmax = 250)    \n# }, video.name = \"jianshi.mp4\", other.opts = \"-b 500k\")    \n# \n################  \n\n```\n:::\n\n\n\n### 3.2. 二元函数: \n\n$$\n 20 + x_1^2 + x_2^2 - 10 (\\cos(2 \\pi  x_1) + \\cos(2  pix_2))\n$$\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n\nRastrigin = function(x1, x2) {\n    20 + x1^2 + x2^2 - 10 * (cos(2 * pi * x1) + cos(2 * pi * x2))\n}\n# 画图\n# x1 = seq(-5.12, 5.12, by = 0.1)\n# x2 = seq(-5.12, 5.12, by = 0.1)\n# f = outer(x1, x2, Rastrigin)\n# persp3D(x1, x2, f, theta = 50, phi = 20)# 3D图\n# filled.contour(x1, x2, f, color.palette = jet.colors)# 热力图\n\n\nmonitor = function(obj) {\n    contour(x1, x2, f, drawlabels = FALSE, col = gray(0.5))\n    title(paste(\"iteration =\", obj@iter), font.main = 1)\n    points(obj@population, pch = 20, col = 2)\n    Sys.sleep(0.2)\n}\n\nGA = ga(type = \"real-valued\", fitness = function(x) -Rastrigin(x[1], x[2]),\n        lower = c(-5.12,-5.12), upper = c(5.12, 5.12), \n        popSize = 50, maxiter = 100, monitor = NULL)  #定义monitor,暂时不运行\n\n\nGA@solution\n#>                  x1           x2\n#>  [1,] -0.0001989624 1.942699e-06\n```\n:::\n\n\n### 3.3 最小二乘法\n\n删除该例子\n\n\n### 3.4 子集的选择\n\n给定一组预测因子，子集选择的目的是确定最相关的预测因子，以解释响应变量的变化。我们可以利用遗传算法来赛选出更好的相关因子，从而产生更好的估计和更清晰的回归系数解释。使用二进制字符串可以自然地处理赛选子集问题，其中1表示选择该变量，0表示不选择该变量。\n\n候选子集的适合度可以通过几种模型选择标准之一来衡量，比如AIC、BIC等\n\n我们首先从`UsingR`包中加载数据集，然后通过OLS拟合线性回归模型:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\nxfun::pkg_load2(\"UsingR\")\ndata(\"fat\", package = \"UsingR\")#252*19\nmod = lm(body.fat.siri ~ age + weight + height + \n           neck + chest + abdomen +\n           hip + thigh + knee + ankle + \n           bicep + forearm + wrist, \n         data = fat)#通过观察，因变量（body.fat.siri） 与上述 13个自变量有关系\nsummary(mod)\n#>  \n#>  Call:\n#>  lm(formula = body.fat.siri ~ age + weight + height + neck + chest + \n#>      abdomen + hip + thigh + knee + ankle + bicep + forearm + \n#>      wrist, data = fat)\n#>  \n#>  Residuals:\n#>       Min       1Q   Median       3Q      Max \n#>  -11.1687  -2.8639  -0.1014   3.2085  10.0068 \n#>  \n#>  Coefficients:\n#>               Estimate Std. Error t value Pr(>|t|)    \n#>  (Intercept) -18.18849   17.34857  -1.048  0.29551    \n#>  age           0.06208    0.03235   1.919  0.05618 .  \n#>  weight       -0.08844    0.05353  -1.652  0.09978 .  \n#>  height       -0.06959    0.09601  -0.725  0.46925    \n#>  neck         -0.47060    0.23247  -2.024  0.04405 *  \n#>  chest        -0.02386    0.09915  -0.241  0.81000    \n#>  abdomen       0.95477    0.08645  11.044  < 2e-16 ***\n#>  hip          -0.20754    0.14591  -1.422  0.15622    \n#>  thigh         0.23610    0.14436   1.636  0.10326    \n#>  knee          0.01528    0.24198   0.063  0.94970    \n#>  ankle         0.17400    0.22147   0.786  0.43285    \n#>  bicep         0.18160    0.17113   1.061  0.28966    \n#>  forearm       0.45202    0.19913   2.270  0.02410 *  \n#>  wrist        -1.62064    0.53495  -3.030  0.00272 ** \n#>  ---\n#>  Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#>  \n#>  Residual standard error: 4.305 on 238 degrees of freedom\n#>  Multiple R-squared:  0.749,\tAdjusted R-squared:  0.7353 \n#>  F-statistic: 54.65 on 13 and 238 DF,  p-value: < 2.2e-16\n```\n:::\n\n\n设计矩阵(没有截距)和响应变量从拟合模型对象中提取:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = model.matrix(mod)[, -1] # 252*13  选取13 个自变量的列，构建自变量\ny = model.response(model.frame(mod)) # 提取因变量的列，\n\n###### 那么，最大化的适应度函数可以定义为:\n\n fitness = function(string) {\n   inc = which(string == 1)\n   X = cbind(1, x[,inc])\n   mod = lm.fit(X, y)\n   class(mod) = \"lm\"\n  -AIC(mod)\n}\n```\n:::\n\n\n这仅仅是利用字符串对应位置上的1所标识的预测因子来估计回归模型，并返回所选标准的负值。注意，截取项总是包含在内，并且我们使用基本的lm。拟合函数加速计算。下面的R代码运行GA:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nGA = ga(\"binary\", fitness = fitness, nBits = ncol(x),\n        names = colnames(x),monitor = F,parallel = T)# monitor = plot\n\n\nGA@solution\n#>       age weight height neck chest abdomen hip thigh knee ankle bicep forearm\n#>  [1,]   1      1      0    1     0       1   1     1    0     0     0       1\n#>       wrist\n#>  [1,]     1\n\n#####利用GA找到的最优子集得到的线性回归模型如下:\n\nmod2 = lm(body.fat.siri ~ .,\n             data = data.frame(body.fat.siri = y, x[,GA@solution == 1]))\nsummary(mod2)\n#>  \n#>  Call:\n#>  lm(formula = body.fat.siri ~ ., data = data.frame(body.fat.siri = y, \n#>      x[, GA@solution == 1]))\n#>  \n#>  Residuals:\n#>       Min       1Q   Median       3Q      Max \n#>  -10.9757  -2.9937  -0.1644   2.9766  10.2244 \n#>  \n#>  Coefficients:\n#>               Estimate Std. Error t value Pr(>|t|)    \n#>  (Intercept) -22.65637   11.71385  -1.934  0.05426 .  \n#>  age           0.06578    0.03078   2.137  0.03356 *  \n#>  weight       -0.08985    0.03991  -2.252  0.02524 *  \n#>  neck         -0.46656    0.22462  -2.077  0.03884 *  \n#>  abdomen       0.94482    0.07193  13.134  < 2e-16 ***\n#>  hip          -0.19543    0.13847  -1.411  0.15940    \n#>  thigh         0.30239    0.12904   2.343  0.01992 *  \n#>  forearm       0.51572    0.18631   2.768  0.00607 ** \n#>  wrist        -1.53665    0.50939  -3.017  0.00283 ** \n#>  ---\n#>  Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n#>  \n#>  Residual standard error: 4.282 on 243 degrees of freedom\n#>  Multiple R-squared:  0.7466,\tAdjusted R-squared:  0.7382 \n#>  F-statistic: 89.47 on 8 and 243 DF,  p-value: < 2.2e-16\n```\n:::\n\n\n上述两种解决方案相比，\n\n### 3.5 约束优化\n\n- 约束优化,可以通过对目标函数加入惩罚函数来实现,即不在约束范围内的目标函数值设置为 $- \\infty$\n\n\n背包问题:假定背包的最大容量为W，N件物品，每件物品都有自己的价值和重量，将物品放入背包中使得背包内物品的总价值最大。\n\n如果第$i$项选择为背包，则$x_i = 1$，不选则$x_i = 0$。考虑以下数据，`利润(p)，权重(w)和容量(V):`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\np = c(6, 5, 8, 9, 6, 7, 3)\nw = c(2, 3, 6, 7, 5, 9, 4)\nV = 14\n\n##### 利用二进制遗传算法可以解决背包问题，但由于不等式约束，并不是所有可行解都可行。\n##### 我们可以通过惩罚不可行的解决办法来考虑约束。因此，适应度函数可以定义如下:\nknapsack = function(x) {\n f = sum(x * p)\n penalty = sum(w) * abs(sum(x * w)-V)\n f - penalty\n}\n\n#####  当目标函数f被惩罚时，一个量取决于提出的解决方案的容量与背包容量之间的距离。然后:\nGA = ga(type = \"binary\", fitness = knapsack, nBits = length(w),\n           maxiter = 1000, run = 200, popSize = 20)\n\nGA@solution# 解\n#>       x1 x2 x3 x4 x5 x6 x7\n#>  [1,]  1  0  0  1  1  0  0\n\nsum(p * GA@solution)\n#>  [1] 21\n\nsum(w * GA@solution)\n#>  [1] 14\n```\n:::\n\n\n### 3.7. 解决TSP问题\n\n有若干个城市(n个)，任何两个城市之间的距离都是确定的，现要求一旅行商从某城市出发必须经过每一个城市且只在一个城市逗留一次，最后回到出发的城市，问如何事先确定一条最短的线路。可行的解决方案的设置是由可能的途径的总数,等于(n−1)!/2.\n\n考虑一个简单的例子，现在共有A、B、C、D四个城市。\n\n![](https://cdn.jsdelivr.net/gh/zscmmm/imgs2208save@master/img/2020091421unnamed-chunk-21-1.png)\n\n```R\n为了将图中关系数据化，可用如下规则来描述：  \n\n城市映射为编号：A——1，B——2，C——3，D——4；  \n\n城市之间的距离用二维数组来表示，记为D[i,j]，如：D[1,2]表示城市A与城市B之间的距离，于是D[1,2]=7，同时也表示我现在处于A–1城市，将要去B–2城市；  \n```\n\n\n可用遗传算法解决此类问题\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list = ls())\n#city数据结构 一共有31个城市，计算出每两个城市之间的距离，用距离矩阵表示\nD=as.matrix(dist(city)) # 距离矩阵\n#定义总的路线长度\ntourLength = function(tour, distMatrix) {\n   tour = c(tour, tour[1]) #设置为回路，代表所走的路径\n   route = embed(tour, 2)[,2:1]#根据回路,产生对应的距离矩阵的下标,每一行代表一个坐标，第一行处于i坐标\n   sum(distMatrix[route])\n}\ntspFitness = function(tour, ...) 1/tourLength(tour, ...)\n\nGA3 = ga(type = \"permutation\", fitness = tspFitness, distMatrix = D,\n          lower  = 1, upper = dim(D)[1], popSize = 50, maxiter = 5000,\n          run = 500, pmutation = 0.2,monitor = F, parallel = T)\n\nsummary(GA3)\n\n\napply(GA3@solution, 1, tourLength, D)#找到的解决方案对应于一条独特的路径，其行程长度等于:\n\n```\n:::\n\n\n图形对比\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(tibble)\ncity=rownames_to_column(city, var = \"rowname\")\n#原始图像\n# p=ggplot(data=city,aes(x=X1,y=X2))+geom_point(shape=19,size=4,col=\"red\")+theme_bw()+\n#   geom_text(aes(label=rowname),size=4,vjust=1.5)+geom_path(linetype=2)+ggtitle(\"初始顺序\")\nlibrary(dplyr)\ncity_solution=data.frame(solution=as.factor(GA3@solution[1,]))\nre_city=inner_join(city_solution,city,by=c(\"solution\"=\"rowname\"))\n#re_city #最优解城市顺序\n##最优解城市图像\nj=ggplot(data=re_city,aes(x=X1,y=X2))+geom_point(shape=19,size=4,col=\"red\")+theme_bw()+\n  geom_text(aes(label=solution),size=4,vjust=1.5)+geom_path(linetype=2)+\n  ggtitle(\"最优解\")+\n  geom_point(x=re_city[1,2],y=re_city[1,3],shape=17,size=5,col=\"blue\")+\n   theme(plot.title = element_text(hjust = 0.5)) + theme(text=element_text(family=\"Songti SC\"))\n\nj \n```\n:::\n\n\n![](https://cdn.jsdelivr.net/gh/zscmmm/imgs2208save@master/img/2020091421unnamed-chunk-26-1.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n#>  R version 4.2.1 (2022-06-23)\n#>  Platform: aarch64-apple-darwin20 (64-bit)\n#>  Running under: macOS Monterey 12.5.1\n#>  \n#>  Matrix products: default\n#>  BLAS:   /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRblas.0.dylib\n#>  LAPACK: /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/lib/libRlapack.dylib\n#>  \n#>  locale:\n#>  [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n#>  \n#>  attached base packages:\n#>  [1] stats     graphics  grDevices utils     datasets  methods   base     \n#>  \n#>  other attached packages:\n#>  [1] GA_3.2.2         iterators_1.0.14 foreach_1.5.2   \n#>  \n#>  loaded via a namespace (and not attached):\n#>   [1] Rcpp_1.0.9          lattice_0.20-45     deldir_1.0-6       \n#>   [4] png_0.1-7           assertthat_0.2.1    digest_0.6.29      \n#>   [7] utf8_1.2.2          R6_2.5.1            backports_1.4.1    \n#>  [10] evaluate_0.16       ggplot2_3.3.6       pillar_1.8.1       \n#>  [13] rlang_1.0.4         data.table_1.14.2   rstudioapi_0.14    \n#>  [16] HistData_0.8-7      gifski_1.6.6-1      UsingR_2.0-7       \n#>  [19] rpart_4.1.16        Matrix_1.4-1        checkmate_2.1.0    \n#>  [22] rmarkdown_2.16.1    splines_4.2.1       stringr_1.4.1      \n#>  [25] foreign_0.8-82      htmlwidgets_1.5.4   munsell_0.5.0      \n#>  [28] compiler_4.2.1      xfun_0.32           pkgconfig_2.0.3    \n#>  [31] base64enc_0.1-3     htmltools_0.5.3     nnet_7.3-17        \n#>  [34] tidyselect_1.1.2    tibble_3.1.8        gridExtra_2.3      \n#>  [37] htmlTable_2.4.1     Hmisc_4.7-1         codetools_0.2-18   \n#>  [40] fansi_1.0.3         crayon_1.5.1        dplyr_1.0.9        \n#>  [43] MASS_7.3-58.1       grid_4.2.1          jsonlite_1.8.0     \n#>  [46] gtable_0.3.0        lifecycle_1.0.1     DBI_1.1.3          \n#>  [49] magrittr_2.0.3      scales_1.2.1        cli_3.3.0          \n#>  [52] stringi_1.7.8       doParallel_1.0.17   latticeExtra_0.6-30\n#>  [55] generics_0.1.3      vctrs_0.4.1         Formula_1.2-4      \n#>  [58] RColorBrewer_1.1-3  tools_4.2.1         interp_1.1-3       \n#>  [61] glue_1.6.2          purrr_0.3.4         jpeg_0.1-9         \n#>  [64] parallel_4.2.1      fastmap_1.1.0       survival_3.4-0     \n#>  [67] yaml_2.3.5          colorspace_2.0-3    cluster_2.1.4      \n#>  [70] knitr_1.40\n```\n:::\n",
    "supporting": [
      "GA_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}